map $http_upgrade $connection_upgrade {
	default upgrade;
	''	close;
}

upstream docker-transmission {
    server transmission:9091;
}

upstream docker-jdownloader2 {
    server jdownloader2:5800;
}

upstream docker-netdata {
    server netdata:19999;
    keepalive 64;
}

upstream docker-nextcloud {
    server nextcloud:443;
    keepalive 100;
}

upstream docker-jellyfin {
    server jellyfin:8096;
}

upstream docker-jenkins {
    server jenkins:8080;
}

upstream docker-code-server {
    server code-server:8443;
}

server {
    listen 80;
 
    server_name ${PrimaryDomain} ${SubDomain} home.${SubDomain};
    
    location ^~ /.well-known/acme-challenge/ {
        alias /var/www/certbot/;
	    default_type "text/plain";
        autoindex on;
        dav_access all:r;
    }

    location / {
        rewrite ^ https://$host$request_uri? permanent;
    }
}

server {
    charset utf-8;
    server_name ${PrimaryDomain} ${SubDomain} home.${SubDomain};

    root /usr/share/nginx/html;
    
    listen 443 ssl;
    
    ssl on;
    ssl_certificate /etc/letsencrypt/live/${PrimaryDomain}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${PrimaryDomain}/privkey.pem;
    
    location /.well-known/acme-challenge/ {
    	alias /var/www/certbot/;
    	default_type "text/plain";
    	autoindex on;
        dav_access all:r;
    }
    
    location / {
        index index.html;
        error_page 404 /404.html;
    }
    
    location /transmission {
    	auth_basic "restricted";
        auth_basic_user_file /etc/nginx/user.htpasswd;
    
        proxy_pass http://docker-transmission;
        proxy_redirect off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $server_name;
    }

    location = /netdata {
        return 301 /netdata/;
    }

    location ~ /netdata/(?<ndpath>.*) {
        auth_basic "restricted";
        auth_basic_user_file /etc/nginx/user.htpasswd;

	    proxy_redirect off;
	    proxy_set_header Host $host;

	    proxy_set_header X-Forwarded-Host $host;
	    proxy_set_header X-Forwarded-Server $host;
	    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	    proxy_http_version 1.1;
	    proxy_pass_request_headers on;
	    proxy_set_header Connection "keep-alive";
	    proxy_store off;
	    proxy_pass http://docker-netdata/$ndpath$is_args$args;

	    gzip on;
	    gzip_proxied any;
	    gzip_types *;
    }

    location /code-server {
        return 301 http://code.${PrimaryDomain}/;
    }
    
    location = /jdownloader-2 {
        return 301 $scheme://$http_host/jdownloader-2/;
    }
	
    location /jdownloader-2/ {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header X-NginX-Proxy true;
        
        set $target http://docker-jdownloader2/;

	    proxy_pass http://$target;
        
		location /jdownloader-2/websockify {
			proxy_pass http://docker-jdownloader2/websockify/;
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection $connection_upgrade;
			proxy_read_timeout 86400;
		}
	}

    location /share {
        alias /var/webdav/file/share;
        autoindex on;
        dav_access all:r;
    }
   
 }

server {
    server_name code.${SubDomain} code.${PrimaryDomain};
    charset utf-8;
    
    listen 443 ssl;
    
    ssl on;
    ssl_certificate /etc/letsencrypt/live/${PrimaryDomain}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${PrimaryDomain}/privkey.pem;
    
    location / {
    	proxy_pass         http://docker-code-server;
	    proxy_http_version      1.1;
    	proxy_set_header       Upgrade $http_upgrade;
    	proxy_set_header       Connection "upgrade";
    }
}

#server {
#    server_name tomcat.${PrimaryDomain} tomcat.${SubDomain};
#    charset utf-8;
#    
#    listen 443 ssl;
#    
#    ssl on;
#    ssl_certificate /etc/letsencrypt/live/${PrimaryDomain}/fullchain.pem;
#    ssl_certificate_key /etc/letsencrypt/live/${PrimaryDomain}/privkey.pem;
#    
#    location / {
#    	proxy_pass         http://${PrimaryDomain}:1205;
#	
#	proxy_read_timeout 999999;
#   	proxy_connect_timeout 999999;
#   	proxy_send_timeout 999999;
#   	send_timeout 999999;
#   	proxy_redirect         off;
#	
#	proxy_http_version 1.1;
#	proxy_set_header Upgrade $http_upgrade;
#   	proxy_set_header Connection 'upgrade';
#   	proxy_set_header Host $host;
#   	proxy_cache_bypass $http_upgrade;
#	
#    }
#}

server {
    server_name jenkins.${PrimaryDomain} jenkins.${SubDomain};
    charset utf-8;
    
    listen 443 ssl;
    
    ssl on;
    ssl_certificate /etc/letsencrypt/live/${PrimaryDomain}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${PrimaryDomain}/privkey.pem;
    
    location / {
    	proxy_pass http://docker-jenkins;
	    proxy_http_version 1.1;
    	proxy_set_header Upgrade $http_upgrade;
    	proxy_set_header Connection "upgrade";
    }
}

server {
    server_name jellyfin.${PrimaryDomain} jellyfin.${SubDomain};
    charset utf-8;
    
    listen 443 ssl;
    
    ssl on;
    ssl_certificate /etc/letsencrypt/live/${PrimaryDomain}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${PrimaryDomain}/privkey.pem;
    resolver 127.0.0.1 valid=30;
        
    location / {
        proxy_pass http://docker-jellyfin;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;

        # Disable buffering when the nginx proxy gets very resource heavy upon streaming
        proxy_buffering off;
    }
    
    location = /web/ {
        # Proxy main Jellyfin traffic
        proxy_pass http://docker-jellyfin/web/index.html;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;
    }

    location /socket {
        # Proxy Jellyfin Websockets traffic
        proxy_pass http://docker-jellyfin;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;
    }
}

server {
    server_name nextcloud.${SubDomain} nextcloud.${PrimaryDomain};
    charset utf-8;
    
    listen 443 ssl;
    
    ssl on;
    ssl_certificate /etc/letsencrypt/live/${PrimaryDomain}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${PrimaryDomain}/privkey.pem;
    
    add_header Strict-Transport-Security "max-age=15552000; includeSubdomains; preload";

    client_max_body_size 10G;
	client_body_buffer_size 1024k;
    
     # security headers
    add_header X-Frame-Options        SAMEORIGIN;
    add_header X-XSS-Protection        "1; mode=block" always;
    add_header X-Content-Type-Options  nosniff;
    add_header Referrer-Policy         "no-referrer-when-downgrade" always;
    add_header Strict-Transport-Security "max-age=63072000" always;
    
    # gzip
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml application/json application/javascript application/rss+xml application/atom+xml image/svg+xml;

    location / {
    	proxy_pass https://docker-nextcloud;
	    proxy_http_version 1.1;
        proxy_ssl_certificate /etc/letsencrypt/live/${PrimaryDomain}/fullchain.pem;
        proxy_ssl_certificate_key /etc/letsencrypt/live/${PrimaryDomain}/privkey.pem;
    
        # proxy header
   	    proxy_set_header Connection 'upgrade';
   	    proxy_set_header Host $host;
   	    proxy_cache_bypass $http_upgrade;

        # proxy timeout
	    proxy_read_timeout 1000;
   	    proxy_connect_timeout 1000;
   	    proxy_send_timeout 1000;
    }
}
